#!/usr/bin/env python
# -*- coding: utf-8 -*- 
import sys
import os
import time
import threading
import subprocess
import argparse
import random

from mininet.net import Mininet
from mininet.topo import Topo
from mininet.topolib import TreeTopo
from mininet.util import dumpNodeConnections
from mininet.cli import CLI

class MyTopo(Topo):
    def __init__(self, topofilename):
        # Initialize topology
        Topo.__init__(self)

        hosts = []

        with open(topofilename, 'r') as topofile:
            line = topofile.readline() 
            nline = int(line)

            # Add host(vertex)
            for i in range(int(nline)):
                hostname = 'h' + str(i)
                hosts.append(self.addHost(hostname))

            # Add linke(Edge)
            for i in range(int(nline)):
                string = topofile.readline()

                # Read lower triangle matrix
                for j in range(int(i)):
                    if(string[j] == '1'):
                        self.addLink(hosts[i], hosts[j])
                pass

def initiate_fon(hosts, port):
    i = 0
    for host in hosts:
        #cmdstr = 'xterm -title h%s -hold -e "./server %d %d" &' %(i, i, port+i)
        cmdstr = './server %d %d > /dev/null 2>&1 &' %(i, port+i)
        host.cmd(cmdstr)
        i = i+1

def do_kill_aco_node(wait_time, port):
    time.sleep(wait_time)

    ps = subprocess.Popen(['ps', '-ef'], stdout=subprocess.PIPE)
    grep = subprocess.Popen(['grep', '[.]/aco -p %d' % port], stdin=ps.stdout, stdout=subprocess.PIPE)

    ps.stdout.close()
    out, error = grep.communicate()
    pid = int(out.split()[1])
    ec = os.system("kill %d" % pid)

    print '=========================================================='
    print 'Node has been killed'
    print ' - port:', port
    print ' - pid:', pid
    print ' - ec:', ec
    print '=========================================================='


def kill_aco_node(wait_time, port):
    th = threading.Thread(target=do_kill_aco_node, args=(wait_time, port,))
    th.start()

def initiate_aco(hosts, agent, port, logfile):
    NUM_HOST    = len(hosts)

    kill_aco_node(10, 9914)

    i = 0
    for host in hosts:
        if(i!=0):
            cmdstr = '%s -p %d -t %d > /dev/null 2>&1 &' %(agent, port+i, NUM_HOST)
            host.cmd(cmdstr)
        i = i+1

    if(logfile is None):
        cmdstr = 'xterm -e "%s -p %d -t %d -m"' % (agent, port, NUM_HOST)
    else:
        cmdstr = 'xterm -e "%s -p %d -t %d -l > %s 2>&1"' % (agent, port, NUM_HOST, logfile )
    print cmdstr
    hosts[0].cmd(cmdstr)

def return_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('agent', metavar='agent', type=str,
                        help='A aco agent path')

    parser.add_argument('topofile', metavar='topofile', type=str,
                        help='A filename or path that describes topology')

    parser.add_argument('-l', '--logfile', type=str, required=False,
                        help='if want to log, type a file name.')

    return parser.parse_args()

def main():
    args = return_args()

    my_topo = MyTopo(args.topofile)

    net = Mininet(topo=my_topo)
    print 'total hosts: %d' % len(net.hosts)

    net.start()

    PORT = 9900
    print >> sys.stderr,  'initiating FON at each node'
    initiate_fon(net.hosts, PORT)

    # wait for stabilized state
    # (Making Forwarding table exchainging informations withneighbor node)
    time.sleep(3)

    print >> sys.stderr,  'initiating ACO at each node'
    initiate_aco(net.hosts, args.agent, PORT, args.logfile)

    #CLI(net)
    net.stop()

if __name__ == '__main__':
    main()


