#!/usr/bin/env python
# -*- coding: utf-8 -*- 
import sys
import os
import time
import argparse
import random

from mininet.net import Mininet
from mininet.topo import Topo
from mininet.topolib import TreeTopo
from mininet.util import dumpNodeConnections
from mininet.cli import CLI

class MyTopo(Topo):
    def __init__(self, topofilename):
        # Initialize topology
        Topo.__init__(self)

        hosts = []

        with open(topofilename, 'r') as topofile:
            line = topofile.readline() 
            nline = int(line)

            # Add host(vertex)
            for i in range(int(nline)):
                hostname = 'h' + str(i)
                hosts.append(self.addHost(hostname))

            # Add linke(Edge)
            for i in range(int(nline)):
                string = topofile.readline()

                # Read lower triangle matrix
                for j in range(int(i)):
                    if(string[j] == '1'):
                        self.addLink(hosts[i], hosts[j])
                pass

def initiate_fon(hosts, port):
    i = 0
    for host in hosts:
        #cmdstr = 'xterm -title h%s -hold -e "./server %d %d" &' %(i, i, port+i)
        cmdstr = './server %d %d > /dev/null 2>&1 &' %(i, port+i)
        host.cmd(cmdstr)
        i = i+1

def initiate_aco(hosts, agent, port, logfile):
    NUM_HOST    = len(hosts)
    #SLEEP_TIME  = random.random()/10.0

    i = 0
    for host in hosts:
        if(i!=0):
            cmdstr = '%s -p %d -t %d > /dev/null 2>&1 &' %(agent, port+i, NUM_HOST)
            host.cmd(cmdstr)
        i = i+1
        # All-pair 알고리즘을 동작시킬 경우, 모든 노드가 (거의)동시에 동작할 때
        # 매우 안좋은 효율을 보인다.
        # 아마도 인접 노드들에게 패킷이 전달되어 정보가 업데이트 되는 시간이
        # 계속해서 미뤄져서 그런것이라 판단된다.
        #time.sleep(SLEEP_TIME)

    if(logfile is None):
        cmdstr = 'xterm -e "%s -p %d -t %d -m"' % (agent, port, NUM_HOST)
    else:
        cmdstr = 'xterm -e "%s -p %d -t %d -l > %s 2>&1"' % (agent, port, NUM_HOST, logfile )
    print cmdstr
    hosts[0].cmd(cmdstr)

def return_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('agent', metavar='agent', type=str,
                        help='A aco agent path')

    parser.add_argument('topofile', metavar='topofile', type=str,
                        help='A filename or path that describes topology')

    parser.add_argument('-l', '--logfile', type=str, required=False,
                        help='if want to log, type a file name.')

    return parser.parse_args()

def main():
    args = return_args()

    my_topo = MyTopo(args.topofile)

    net = Mininet(topo=my_topo)
    print 'total hosts: %d' % len(net.hosts)

    net.start()

    PORT = 9900
    print >> sys.stderr,  'initiating FON at each node'
    initiate_fon(net.hosts, PORT)

    # wait for stabilized state
    time.sleep(3)

    print >> sys.stderr,  'initiating ACO at each node'
    initiate_aco(net.hosts, args.agent, PORT, args.logfile)

    #CLI(net)
    net.stop()

if __name__ == '__main__':
    main()


